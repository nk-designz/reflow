{"version":3,"sources":["App.js","actions/index.js","serviceWorker.js","reducers/note.js","reducers/isLoggedIn.js","reducers/index.js","index.js","storage/index.js"],"names":["App","newNote","dispatch","useDispatch","notes","useSelector","state","map","note","key","heading","className","body","onClick","type","icon","faTrash","name","placeholder","value","onChange","event","target","noteText","replace","faPlus","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","noteReducer","action","concat","isLoggedInReducer","rootReducer","combineReducers","login","loginReducer","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b15deef9.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { addNote, flushNotes } from './actions';\n\nfunction App() {\n\n  let newNote;\n  const dispatch = useDispatch();\n  const notes = useSelector( state => state.notes)\n                .map(\n                  (note) => <div key={note.heading} className=\"note\" ><h1>{note.heading}</h1>{note.body}</div>\n                );\n\n  const getNoteObject = (noteText) => {\n    return {\n      heading: noteText.replace(/(([^\\s]+\\s\\s*){4})(.*)/,\"$1â€¦\"), // The first 4 words aare used for the heading \n      body: noteText}}\n\n  return (\n    <div className=\"App\">\n      <button className=\"flush\"  onClick={ () => dispatch(flushNotes()) }>\n        <FontAwesomeIcon icon={faTrash} />\n      </button>\n      <div className=\"new\">\n        <input type=\"text\" \n               name=\"name\" \n               placeholder=\"Type in to remember\" \n               value={newNote} \n               onChange={ (event) => newNote = event.target.value } \n               />\n        <button onClick={ () => dispatch(addNote(getNoteObject(newNote))) }>\n          <FontAwesomeIcon icon={faPlus} />\n        </button>\n      </div>\n      <div className=\"note-container\">\n        <h1 className=\"empty\" >Add a note :)</h1>\n        {notes}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const addNote = (note) => {\n    return {\n        type: 'ADDNOTE',\n        note: note\n    }\n}\n\nexport const flushNotes = () => {\n    return {\n        type: 'FLUSHNOTES'\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const noteReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'ADDNOTE':\n            return state.concat([action.note]);\n        case 'FLUSHNOTES':\n            return [];\n        default:\n            return state;\n    }\n}\n\nexport default noteReducer","const isLoggedInReducer = (state = false, action) => {\n    switch(action.type) {\n        case 'SIGN_IN':\n            return true;\n        default:\n            return state;\n    }\n}\n\nexport default isLoggedInReducer;","import { combineReducers } from 'redux';\n\nimport noteReducer from './note';\nimport loginReducer from './isLoggedIn';\n\nconst namedReducers = () => {\n    return {\n        notes: noteReducer,\n        login: loginReducer,\n    }\n}\n\nconst rootReducer = combineReducers(namedReducers());\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\n\nimport rootReducer from './reducers';\nimport { loadState, saveState } from './storage';\n\nconst persistedState = loadState();\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(() => {\n  saveState({\n    notes: store.getState().notes\n  });\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store } >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const loadState = () => {\n    try {\n      const serializedState = localStorage.getItem('state');\n      if (serializedState === null) {\n        return undefined;\n      }\n      return JSON.parse(serializedState);\n    } catch (err) {\n      return undefined;\n    }\n  }; \n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};"],"sourceRoot":""}